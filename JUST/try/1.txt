Here's how you can implement a table below the "Open Supplier Form" button, where users can add order details from the form to the table, edit or delete entries, and finally save all the entries to the database with a "Buy" button.

Steps:
Add a table below the "Open Supplier Form" button.
Modify the form's submission behavior to add entries to the table (instead of submitting immediately).
Include action buttons in the table for editing and deleting rows.
Add a "Buy" button below the table to submit the collected entries to the database.
Updated Code
1. HTML Changes (HTML.html)
html
Copy code
<!-- Trigger Button -->
<button id="openContainerBtn">Open Supplier Form</button>

<!-- Table to Display Entries -->
<table id="orderTable" border="1" style="width: 100%; margin-top: 20px;">
    <thead>
        <tr>
            <th>Supplier</th>
            <th>Product</th>
            <th>Quantity</th>
            <th>Unit Price</th>
            <th>Total Price</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        <!-- Dynamic rows will be added here -->
    </tbody>
</table>

<!-- Buy Button -->
<button id="buyBtn" style="margin-top: 10px;">Buy</button>

<!-- Updated Container Modal -->
<div id="containerModal" class="modal" style="display:none;">
    <div class="modal-content">
        <span class="close" id="closeContainerModal">&times;</span>
        <div class="container">
            <h4>Select Supplier and Product</h4>
            <form id="orderForm">
                <label for="supplier">Supplier</label>
                <select id="supplier" name="supplier" required>
                    <option value="">Select Supplier</option>
                    <!-- Options populated dynamically by PHP -->
                </select>

                <label for="product">Product</label>
                <select id="product" name="product" required disabled>
                    <option value="">Select Product</option>
                    <!-- Options populated dynamically -->
                </select>

                <label for="quantity">Quantity</label>
                <input type="number" id="quantity" name="quantity" min="1" required>

                <label for="unitPrice">Unit Price</label>
                <input type="text" id="unitPrice" name="unitPrice" readonly>

                <label for="totalPrice">Total Price</label>
                <input type="text" id="totalPrice" name="totalPrice" readonly>

                <button type="button" id="addOrderBtn">Add to Table</button>
            </form>
        </div>
    </div>
</div>
2. JavaScript Changes (script.js)
javascript
Copy code
document.getElementById('openContainerBtn').addEventListener('click', function() {
    document.getElementById('containerModal').style.display = 'block';
});

document.getElementById('closeContainerModal').addEventListener('click', function() {
    document.getElementById('containerModal').style.display = 'none';
});

// Add order to the table
document.getElementById('addOrderBtn').addEventListener('click', function() {
    var supplier = document.getElementById('supplier').value;
    var product = document.getElementById('product').value;
    var quantity = document.getElementById('quantity').value;
    var unitPrice = document.getElementById('unitPrice').value;
    var totalPrice = document.getElementById('totalPrice').value;

    if (supplier && product && quantity && unitPrice && totalPrice) {
        var table = document.getElementById('orderTable').getElementsByTagName('tbody')[0];

        var newRow = table.insertRow();
        
        newRow.innerHTML = `
            <td>${supplier}</td>
            <td>${product}</td>
            <td>${quantity}</td>
            <td>${unitPrice}</td>
            <td>${totalPrice}</td>
            <td>
                <button type="button" class="editBtn">Edit</button>
                <button type="button" class="deleteBtn">Delete</button>
            </td>
        `;
        
        // Close the modal after adding
        document.getElementById('containerModal').style.display = 'none';

        // Attach event listeners for edit and delete
        newRow.querySelector('.editBtn').addEventListener('click', function() {
            // Populate the form for editing
            document.getElementById('supplier').value = supplier;
            document.getElementById('product').value = product;
            document.getElementById('quantity').value = quantity;
            document.getElementById('unitPrice').value = unitPrice;
            document.getElementById('totalPrice').value = totalPrice;

            // Remove row after editing is done
            table.deleteRow(newRow.rowIndex - 1);
            document.getElementById('containerModal').style.display = 'block';
        });

        newRow.querySelector('.deleteBtn').addEventListener('click', function() {
            table.deleteRow(newRow.rowIndex - 1);
        });
    } else {
        alert('Please fill in all fields.');
    }
});

// Buy button logic - Submit the table data to the database
document.getElementById('buyBtn').addEventListener('click', function() {
    var table = document.getElementById('orderTable').getElementsByTagName('tbody')[0];
    var rows = table.getElementsByTagName('tr');
    var orderData = [];

    for (var i = 0; i < rows.length; i++) {
        var cells = rows[i].getElementsByTagName('td');
        var order = {
            supplier: cells[0].innerText,
            product: cells[1].innerText,
            quantity: cells[2].innerText,
            unitPrice: cells[3].innerText,
            totalPrice: cells[4].innerText
        };
        orderData.push(order);
    }

    if (orderData.length > 0) {
        // Send the orderData to the server using an AJAX request
        var xhr = new XMLHttpRequest();
        xhr.open('POST', 'submit_order.php', true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
                alert('Orders submitted successfully.');
                // Clear the table after submission
                table.innerHTML = '';
            }
        };
        xhr.send(JSON.stringify(orderData));
    } else {
        alert('No orders to submit.');
    }
});
3. Explanation:
Open Supplier Form Button: When clicked, it opens the modal with the form to input details.
Add to Table Button: This button adds the order details (supplier, product, quantity, unit price, total price) from the form to the table. Each row in the table has two action buttons: "Edit" and "Delete."
Edit: Populates the form again for editing the order.
Delete: Removes the row from the table.
Buy Button: When clicked, it collects all the rows from the table and sends them to the server using an AJAX request to submit_order.php.
4. Server-Side (submit_order.php)
You will need to handle the JSON data on the server side in submit_order.php to insert the records into the database.

php
Copy code
<?php
// submit_order.php

$data = json_decode(file_get_contents("php://input"), true);

if (!empty($data)) {
    // Establish a database connection
    $conn = new mysqli("localhost", "username", "password", "database");

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    foreach ($data as $order) {
        $supplier = $conn->real_escape_string($order['supplier']);
        $product = $conn->real_escape_string($order['product']);
        $quantity = intval($order['quantity']);
        $unitPrice = floatval($order['unitPrice']);
        $totalPrice = floatval($order['totalPrice']);

        $sql = "INSERT INTO orders (supplier, product, quantity, unit_price, total_price) 
                VALUES ('$supplier', '$product', $quantity, $unitPrice, $totalPrice)";

        if (!$conn->query($sql)) {
            echo "Error: " . $conn->error;
        }
    }

    $conn->close();
    echo "Orders successfully added to the database.";
} else {
    echo "No data received.";
}
?>
This solution enables a smooth flow from form submission, table manipulation, and final submission to the database. Let me know if you need further adjustments!